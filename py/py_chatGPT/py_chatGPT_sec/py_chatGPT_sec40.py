from bytecode import Bytecode, Instr
import resource
import sys

class DSLSandbox:
    def __init__(self):
        self.bytecode = Bytecode()

    def add_instruction(self, instr: Instr):
        """Add a single instruction to the bytecode, ensuring it is safe."""
        if not self.is_safe_instruction(instr):
            raise ValueError(f"Unsichere Bytecode-Sequenz entdeckt: {instr}")
        self.bytecode.append(instr)

    def is_safe_instruction(self, instr: Instr) -> bool:
        """Checks if an instruction is safe."""
        unsafe_ops = {'IMPORT_NAME', 'EXEC_STMT', 'EVAL', 'LOAD_ATTR'}
        # Add other checks as needed
        if instr.name in unsafe_ops:
            return False
        return True

    def execute(self):
        """Executes the generated bytecode in a sandboxed environment."""
        # Restrict resources
        resource.setrlimit(resource.RLIMIT_CPU, (1, 1))  # Limit CPU time to 1 second
        resource.setrlimit(resource.RLIMIT_AS, (10**7, 10**7))  # Limit memory usage

        try:
            exec(self.bytecode.to_code(), {'__builtins__': {}})
        except Exception as e:
            print(f"Fehler während der Ausführung: {e}")

    def add_sandbox_limits(self, max_cpu_time: int, max_memory: int):
        """Setzt die Grenzen für CPU- und Speicherressourcen."""
        resource.setrlimit(resource.RLIMIT_CPU, (max_cpu_time, max_cpu_time))
        resource.setrlimit(resource.RLIMIT_AS, (max_memory, max_memory))


# Beispiel für eine DSL-Definition
class MyDSL:
    def __init__(self):
        self.sandbox = DSLSandbox()

    def compile_to_bytecode(self, dsl_code: str):
        """Compiles DSL code to Python bytecode."""
        # Beispiel für Parsing des DSL-Codes (vereinfacht)
        if dsl_code == "print_hello":
            self.sandbox.add_instruction(Instr("LOAD_GLOBAL", "print"))
            self.sandbox.add_instruction(Instr("LOAD_CONST", "Hello, Sandbox!"))
            self.sandbox.add_instruction(Instr("CALL_FUNCTION", 1))
            self.sandbox.add_instruction(Instr("RETURN_VALUE"))
        else:
            raise ValueError("Unbekannter DSL-Code")

    def execute(self):
        """Execute the compiled bytecode."""
        self.sandbox.execute()


# Beispielnutzung
if __name__ == "__main__":
    dsl = MyDSL()
    dsl.compile_to_bytecode("print_hello")
    dsl.execute()
